{"version":3,"sources":["components/Body/Body.jsx","components/Body/Body.utils.js","redux/array/array.types.js","redux/array/array.actions.js","redux/isRunning/isRunning.types.js","redux/isRunning/isRunning.actions.js","redux/sorted/sorted.types.js","redux/sorted/sorted.actions.js","redux/algorithm/algorithm.types.js","redux/sortSpeed/sortSpeed.types.js","redux/bubbleSort/bubbleSort.types.js","redux/bubbleSort/bubbleSort.actions.js","redux/swappers/swappers.types.js","redux/swappers/swappers.actions.js","components/algorithms/bubbleSort/BubbleSort.js","components/Toolbar/Toolbar.jsx","components/Toolbar/Toolbar.utils.js","redux/algorithm/algorithm.actions.js","redux/sortSpeed/sortSpeed.actions.js","App.js","serviceWorker.js","redux/array/array.reducer.js","redux/swappers/swappers.reducer.js","redux/isRunning/isRunning.reducer.js","redux/sorted/sorted.reducer.js","redux/bubbleSort/bubbleSort.reducer.js","redux/algorithm/algorithm.reducer.js","redux/sortSpeed/sortSpeed.reducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["Body","prevProps","this","props","render","array","currentSorted","currentBubbleTwo","className","arrayOfNumbers","map","element","index","console","log","length","barColor","includes","key","style","height","backgroundColor","Component","connect","arrayActionTypes","CHANGE_ARRAY_SIZE","CHANGE_ARRAY_NUMBERS","changeArrayNumbers","newArray","type","payload","isRunningActionTypes","TOGGLE_IS_RUNNING","toggleIsRunning","sortedActionTypes","SET_CURRENT_SORTED","setCurrentSorted","newSorted","algorithmActionTypes","SET_CURRENT_ALGORITHM","sortSpeedActionTypes","CHANGE_SORT_SPEED","bubbleSortActionTypes","SET_CURRENT_BUBBLE","setCurrentBubbleSort","currentBubble","swapperActionTypes","SET_CURRENT_SWAPPERS","currentSwappers","elements","BubbleSort","defaultArray","dispatch","sortSpeed","currentArray","slice","toRender","sorted","n","i","push","temp","handleDispatch","setTimeout","dispatchFunction","shift","Toolbar","componentDidMount","generateNewArray","arraySize","randomNumber","Math","floor","random","anotherNumber","handleChange","e","target","id","toString","changeArraySize","value","changeSortSpeed","handleSort","preventDefault","setCurrentAlgorithm","text","bind","sort","algorithm","isRunning","DropdownButton","title","Dropdown","Item","onClick","disabled","visibility","min","max","defaultValue","onChange","color","newSize","newSpeed","algo","alert","App","Boolean","window","location","hostname","match","INITIAL_STATE","arrayReducer","state","action","swapperReducer","concat","isRunningReducer","sortedReducer","bubbleSortReducer","algorithmReducer","sortSpeedReducer","combineReducers","swapper","store","createStore","rootReducer","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e90d8bc7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./Body.css\";\n\nclass Body extends Component {\n    componentDidUpdate(prevProps) {\n        if (prevProps !== this.props) {\n            this.render();\n        }\n    }\n    render() {\n        const {\n            array,\n            currentSorted,\n            currentBubbleTwo\n        } = this.props;\n        return (\n            <div className=\"bar-containers\">\n                {\n                    array.arrayOfNumbers ? (array.arrayOfNumbers.map((element, index) => {\n                        console.log(\"Array \" + array.arrayOfNumbers.length)\n                        const barColor =  //IF SWAPPING\n                            currentBubbleTwo.includes(index) ? 'red' : //IF CURRENT BUBBLE TWO IS COMPARING\n                                currentSorted.includes(index) ? 'purple' : '#bbe1fa'\n                        return (\n                            <div\n                                className=\"bar\"\n                                key={index}\n                                style={{ height: `${element}px`, backgroundColor: barColor }}>\n                            </div>\n                        )\n                    })) : (null)\n                }\n            </div>\n        );\n    }\n}\nexport default Body;","import { connect } from 'react-redux';\nimport Body from './Body';\n\nconst mapStateToProps = ({\n    array,\n    currentBubbleTwo,\n    currentSorted\n}) => ({\n    array,\n    currentBubbleTwo,\n    currentSorted\n});\n\nexport default connect(mapStateToProps)(Body);","const arrayActionTypes = {\n    CHANGE_ARRAY_SIZE: 'CHANGE_ARRAY_SIZE',\n    CHANGE_ARRAY_NUMBERS: 'CHANGE_ARRAY_NUMBERS'\n};\nexport default arrayActionTypes;","import arrayActionTypes from \"./array.types\";\n\nexport const changeArraySize = (newSize) => ({\n    type: arrayActionTypes.CHANGE_ARRAY_SIZE,\n    payload: newSize\n});\n\nexport const changeArrayNumbers = (newArray) => ({\n    type: arrayActionTypes.CHANGE_ARRAY_NUMBERS,\n    payload: newArray\n});\n\n","const isRunningActionTypes = {\n    TOGGLE_IS_RUNNING: 'TOGGLE_IS_RUNNING'\n};\n\nexport default isRunningActionTypes;","import isRunningActionTypes from \"./isRunning.types\";\n\nexport const toggleIsRunning = () => ({\n    type: isRunningActionTypes.TOGGLE_IS_RUNNING\n})","const sortedActionTypes = {\n    SET_CURRENT_SORTED: 'SET_CURRENT_SORTED'\n};\n\nexport default sortedActionTypes;","import sortedActionTypes from \"./sorted.types\";\n\nexport const setCurrentSorted = (newSorted) => ({\n    type: sortedActionTypes.SET_CURRENT_SORTED,\n    payload: newSorted\n});","const algorithmActionTypes = {\n    SET_CURRENT_ALGORITHM: 'SET_CURRENT_ALGORITHM'\n}\n\nexport default algorithmActionTypes;","const sortSpeedActionTypes = {\n    CHANGE_SORT_SPEED: 'CHANGE_SORT_SPEED'\n}\n\nexport default sortSpeedActionTypes;","const bubbleSortActionTypes = {\n    SET_CURRENT_BUBBLE: 'SET_CURRENT_BUBBLE'\n}\n\nexport default bubbleSortActionTypes;","import bubbleSortActionTypes from \"./bubbleSort.types\";\n\nexport const setCurrentBubbleSort = (currentBubble) => ({\n    type: bubbleSortActionTypes.SET_CURRENT_BUBBLE,\n    payload: currentBubble\n});","const swapperActionTypes = {\n    SET_CURRENT_SWAPPERS: 'SET_CURRENT_SWAPPERS'\n};\n\nexport default swapperActionTypes;","import swapperActionTypes from \"./swappers.types\";\n\nexport const currentSwappers = (elements) => ({\n    type: swapperActionTypes.SET_CURRENT_SWAPPERS,\n    payload: elements\n});\n","import { setCurrentBubbleSort } from \"../../../redux/bubbleSort/bubbleSort.actions\"; //Bubble sort reducer\nimport { currentSwappers } from \"../../../redux/swappers/swappers.actions\";\nimport { changeArrayNumbers } from \"../../../redux/array/array.actions\"; //Handles changes to the array\nimport { setCurrentSorted } from \"../../../redux/sorted/sorted.actions\"; //Set the order of the currently sorted\nimport { toggleIsRunning } from \"../../../redux/isRunning/isRunning.actions\"; //Toggles true/false depending on current state of the algorithm\n\nfunction BubbleSort(defaultArray, dispatch, sortSpeed) {\n    let currentArray = defaultArray.slice(0),\n        toRender = [],\n        sorted = false,\n        n = defaultArray.length - 1,\n        round = 0;\n\n    while (!sorted) {\n        sorted = true;\n        for (let i = 0; i < n; i++) {\n            toRender.push([i, i + 1]);\n            if (currentArray[i] > currentArray[i + 1]) {\n                toRender.push([i, i + 1, true]);\n                let temp = currentArray[i];\n                currentArray[i] = currentArray[i + 1];\n                currentArray[i + 1] = temp;\n                sorted = false;\n                toRender.push(currentArray.slice(0));\n                toRender.push([]);\n            }\n        }\n        toRender.push([true, n]);\n        n--;\n    }\n    handleDispatch(toRender, dispatch, currentArray, sortSpeed);\n    return currentArray;\n}\n\nfunction handleDispatch(toRender, dispatch, array, sortSpeed) {\n    if (!toRender.length) {\n        dispatch(setCurrentBubbleSort(array.map((element, index) => index)));\n        setTimeout(() => {\n            dispatch(setCurrentBubbleSort([]));\n            dispatch(setCurrentSorted(array.map((element, index) => index)));\n            dispatch(toggleIsRunning());\n        }, 500); //Final iteration once the sorting is completed\n        return;\n    }\n    let dispatchFunction = toRender[0].length > 3 ? changeArrayNumbers\n        :\n        toRender[0].length === 3 || toRender[0].length === 0 ? currentSwappers\n            :\n            toRender[0].length === 2 && typeof toRender[0][0] === 'boolean' ?\n                setCurrentSorted : setCurrentBubbleSort;\n    dispatch(dispatchFunction(toRender.shift()));\n    setTimeout(() => {\n        handleDispatch(toRender, dispatch, array, sortSpeed);\n    }, sortSpeed); //Per cycle of dispatch\n\n}\n\nexport default BubbleSort;\n\n\n","import React, { Component } from 'react';\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\nimport \"./Toolbar.css\";\n\nclass Toolbar extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount = () => {\n        this.generateNewArray();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps !== this.props) {\n            this.render();\n        }\n    }\n    generateNewArray = () => {\n        let { changeArrayNumbers, setCurrentSorted } = this.props;\n        setCurrentSorted([]);\n        const { arraySize } = this.props.array;\n        let newArray = []\n        for (let i = 0; i < arraySize; i++) {\n            let randomNumber = Math.floor(Math.random() * 650) + 1;\n            let anotherNumber = true\n            if (!newArray.includes(randomNumber)) {\n                newArray.push(randomNumber);\n            }\n            else {\n                while (anotherNumber) { //Ensures no duplicates\n                    randomNumber = Math.floor(Math.random() * 650) + 1;\n                    if (!newArray.includes(randomNumber)) {\n                        newArray.push(randomNumber);\n                        anotherNumber = false;\n                    }\n                }\n            }\n        }\n        changeArrayNumbers(newArray);\n    }\n    handleChange = (e) => {\n        let c = e.target.id.toString();\n        if (c === \"arraySize\") {\n            let { changeArraySize } = this.props;\n            changeArraySize(e.target.value);\n            setTimeout(() => {\n                this.generateNewArray();\n            }, 5) //Allows enough time to gather new arraysize\n\n        } else {\n            let { changeSortSpeed } = this.props;\n            changeSortSpeed(e.target.value);\n        }\n    }\n    handleSort = (e) => {\n        e.preventDefault();\n        let { setCurrentAlgorithm } = this.props;\n        setCurrentAlgorithm(e.target.text);\n    }\n    render() {\n        let { array, sort, algorithm, sortSpeed } = this.props;\n        let currentArray = array.arrayOfNumbers;\n        let { isRunning } = this.props.isRunning;\n        return (\n            <div className=\"toolbar-container\">\n                <div className=\"algo-container\">\n                    <div className=\"algo-button\">\n                        <DropdownButton id=\"dropdown\" title={algorithm}>\n                            <Dropdown.Item value=\"BubbleSort\" onClick={this.handleSort}>BubbleSort</Dropdown.Item>\n                        </DropdownButton>\n                    </div>\n                    <div className=\"control-buttons\">\n                        <button onClick={() => sort((currentArray.length ? currentArray : null), sortSpeed.sortSpeed, algorithm)} disabled={isRunning} style={{ visibility: !isRunning ? 'visible' : 'hidden' }}>Sort</button>\n                        <button onClick={this.generateNewArray} disabled={isRunning} style={{ visibility: !isRunning ? 'visible' : 'hidden' }}>GENERATE NEW ARRAY</button>\n                    </div>\n                </div>\n                <div className=\"range-selector\">\n                    <div className=\"range\">\n                        CURRENT ARRAY SIZE = {array.arraySize}\n                        <input type=\"range\" min=\"10\" max=\"50\" defaultValue={array.arraySize} id=\"arraySize\" onChange={this.handleChange} disabled={isRunning} style={{ color: isRunning ? 'red' : null }} />\n                    </div>\n                    <div className=\"separator\"></div>\n                    <div className=\"range\">\n                        SORT SPEED = {`${sortSpeed.sortSpeed} MS`}\n                        <input type=\"range\" min=\"5\" max=\"150\" defaultValue={sortSpeed.sortSpeed} id=\"sortSpeed\" onChange={this.handleChange} disabled={isRunning} style={{ color: isRunning ? 'red' : null }} />\n                    </div>\n                </div>\n            </div >\n        );\n    }\n}\nexport default Toolbar;\n","import { connect } from 'react-redux';\nimport { changeArrayNumbers, changeArraySize } from \"../../redux/array/array.actions\";\nimport { toggleIsRunning } from \"../../redux/isRunning/isRunning.actions\";\nimport { setCurrentSorted } from '../../redux/sorted/sorted.actions';\nimport { setCurrentAlgorithm } from \"../../redux/algorithm/algorithm.actions\";\nimport { changeSortSpeed } from \"../../redux/sortSpeed/sortSpeed.actions\";\n\nimport BubbleSort from '../algorithms/bubbleSort/BubbleSort';\nimport Toolbar from './Toolbar';\n\nconst mapStateToProps = ({\n    array,\n    isRunning,\n    algorithm,\n    sortSpeed,\n    setCurrentSorted\n\n}) => ({\n    array,\n    isRunning,\n    sortSpeed,\n    algorithm,\n    setCurrentSorted\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    changeArrayNumbers: newArray => dispatch(changeArrayNumbers(newArray)),\n    changeArraySize: newSize => dispatch(changeArraySize(newSize)),\n    toggleIsRunning: () => dispatch(toggleIsRunning()),\n    setCurrentAlgorithm: algorithm => dispatch(setCurrentAlgorithm(algorithm)),\n    setCurrentSorted: (newSorted) => dispatch(setCurrentSorted(newSorted)),\n    changeSortSpeed: (newSpeed) => dispatch(changeSortSpeed(newSpeed)),\n    sort: (array, sortSpeed, algorithm) => {\n        let algo = algorithm === 'BubbleSort' ? BubbleSort : null;\n        if (algo !== null) {\n            dispatch(setCurrentSorted([]));\n            dispatch(toggleIsRunning());\n            algo(array, dispatch, sortSpeed);\n        } else { alert(algorithm) }\n    }\n}); //End of mapDispatch\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);\n\n\n\n","import algorithmActionTypes from \"./algorithm.types\";\n\nexport const setCurrentAlgorithm = (algorithm) => ({\n    type: algorithmActionTypes.SET_CURRENT_ALGORITHM,\n    payload: algorithm\n})","import sortSpeedActionTypes from \"./sortSpeed.types\";\n\nexport const changeSortSpeed = (newSpeed) => ({\n    type: sortSpeedActionTypes.CHANGE_SORT_SPEED,\n    payload: newSpeed\n})","import React from 'react';\nimport './App.css';\nimport Body from \"./components/Body/Body.utils\";\nimport Toolbar from \"./components/Toolbar/Toolbar.utils\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Toolbar />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import arrayActionTypes from \"./array.types\";\nconst INITIAL_STATE = {\n    arraySize: 10,\n    arrayOfNumbers: []\n}\n\nconst arrayReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case arrayActionTypes.CHANGE_ARRAY_SIZE:\n            return {\n                ...state,\n                arraySize: action.payload\n            }\n        case arrayActionTypes.CHANGE_ARRAY_NUMBERS:\n            return {\n                ...state,\n                arrayOfNumbers: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport default arrayReducer;\n\n","import swapperActionTypes from \"./swappers.types\";\n\nconst INITIAL_STATE = [];\n\nconst swapperReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case (swapperActionTypes.SET_CURRENT_SWAPPERS):\n            return state.concat(action.payload)\n        default:\n            return state;\n    }\n}\n\nexport default swapperReducer;\n\n","import isRunningActionTypes from \"./isRunning.types\";\n\nconst INITIAL_STATE = {\n    isRunning: false\n};\n\nconst isRunningReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case isRunningActionTypes.TOGGLE_IS_RUNNING:\n            return {\n                ...state,\n                isRunning: !state.isRunning//Flip the current state\n            }\n        default:\n            return state;\n    }\n}\n\nexport default isRunningReducer;","import sortedActionTypes from \"./sorted.types\";\n\nconst INITIAL_STATE = [];\n\nconst sortedReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case sortedActionTypes.SET_CURRENT_SORTED:\n            if (action.payload.length) {\n                return (state.concat(action.payload))\n            } else {\n                return []\n            }\n\n        default: return state\n    }\n}\nexport default sortedReducer;\n","import bubbleSortActionTypes from \"./bubbleSort.types\";\n\nconst INITIAL_STATE = [];\n\nconst bubbleSortReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case (bubbleSortActionTypes.SET_CURRENT_BUBBLE):\n            return action.payload\n        default:\n            return state\n\n    }\n}\n\nexport default bubbleSortReducer;\n\n","import algorithmActionTypes from \"./algorithm.types\";\n\nconst INITIAL_STATE = \"Choose an Algorithm!\";\n\nconst algorithmReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case (algorithmActionTypes.SET_CURRENT_ALGORITHM):\n            return (action.payload)\n        default:\n            return state\n    }\n}\n\nexport default algorithmReducer;","import sortSpeedActionTypes from \"./sortSpeed.types\";\n\nconst INITIAL_STATE = {\n    sortSpeed: 5\n};\n\nconst sortSpeedReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case (sortSpeedActionTypes.CHANGE_SORT_SPEED):\n            return {\n                ...state,\n                sortSpeed: action.payload\n            }\n        default: return state\n    }\n}\n\nexport default sortSpeedReducer;","import { combineReducers } from 'redux';\n//IMPORT THE REDUCERS HERE\nimport arrayReducer from \"./array/array.reducer\";\nimport swapperReducer from './swappers/swappers.reducer';\nimport isRunningReducer from \"./isRunning/isRunning.reducer\";\nimport sortedReducer from \"./sorted/sorted.reducer\";\nimport bubbleSortReducer from './bubbleSort/bubbleSort.reducer';\nimport algorithmReducer from './algorithm/algorithm.reducer';\nimport sortSpeedReducer from \"./sortSpeed/sortSpeed.reducer\";\n\n\nexport default combineReducers({\n    array: arrayReducer,\n    swapper: swapperReducer,\n    isRunning: isRunningReducer,\n    currentSorted: sortedReducer,\n    currentBubbleTwo: bubbleSortReducer,\n    algorithm: algorithmReducer,\n    sortSpeed: sortSpeedReducer\n});\n","import { createStore } from \"redux\";\nimport rootReducer from \"./rootReducer\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from \"./redux/store\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}